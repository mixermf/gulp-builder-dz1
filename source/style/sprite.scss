/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$checked-name: 'checked';
$checked-x: 165px;
$checked-y: 0px;
$checked-offset-x: -165px;
$checked-offset-y: 0px;
$checked-width: 20px;
$checked-height: 20px;
$checked-total-width: 185px;
$checked-total-height: 126px;
$checked-image: '../img/sprites/sprite.png';
$checked: (165px, 0px, -165px, 0px, 20px, 20px, 185px, 126px, '../img/sprites/sprite.png', 'checked', );
$link-name: 'link';
$link-x: 165px;
$link-y: 80px;
$link-offset-x: -165px;
$link-offset-y: -80px;
$link-width: 20px;
$link-height: 19px;
$link-total-width: 185px;
$link-total-height: 126px;
$link-image: '../img/sprites/sprite.png';
$link: (165px, 80px, -165px, -80px, 20px, 19px, 185px, 126px, '../img/sprites/sprite.png', 'link', );
$login-name: 'login';
$login-x: 100px;
$login-y: 0px;
$login-offset-x: -100px;
$login-offset-y: 0px;
$login-width: 45px;
$login-height: 45px;
$login-total-width: 185px;
$login-total-height: 126px;
$login-image: '../img/sprites/sprite.png';
$login: (100px, 0px, -100px, 0px, 45px, 45px, 185px, 126px, '../img/sprites/sprite.png', 'login', );
$notchecked-name: 'notchecked';
$notchecked-x: 165px;
$notchecked-y: 40px;
$notchecked-offset-x: -165px;
$notchecked-offset-y: -40px;
$notchecked-width: 20px;
$notchecked-height: 20px;
$notchecked-total-width: 185px;
$notchecked-total-height: 126px;
$notchecked-image: '../img/sprites/sprite.png';
$notchecked: (165px, 40px, -165px, -40px, 20px, 20px, 185px, 126px, '../img/sprites/sprite.png', 'notchecked', );
$pass-name: 'pass';
$pass-x: 0px;
$pass-y: 81px;
$pass-offset-x: 0px;
$pass-offset-y: -81px;
$pass-width: 45px;
$pass-height: 45px;
$pass-total-width: 185px;
$pass-total-height: 126px;
$pass-image: '../img/sprites/sprite.png';
$pass: (0px, 81px, 0px, -81px, 45px, 45px, 185px, 126px, '../img/sprites/sprite.png', 'pass', );
$quote-name: 'quote';
$quote-x: 0px;
$quote-y: 0px;
$quote-offset-x: 0px;
$quote-offset-y: 0px;
$quote-width: 80px;
$quote-height: 61px;
$quote-total-width: 185px;
$quote-total-height: 126px;
$quote-image: '../img/sprites/sprite.png';
$quote: (0px, 0px, 0px, 0px, 80px, 61px, 185px, 126px, '../img/sprites/sprite.png', 'quote', );
$radio-empty-name: 'radio_empty';
$radio-empty-x: 65px;
$radio-empty-y: 81px;
$radio-empty-offset-x: -65px;
$radio-empty-offset-y: -81px;
$radio-empty-width: 24px;
$radio-empty-height: 24px;
$radio-empty-total-width: 185px;
$radio-empty-total-height: 126px;
$radio-empty-image: '../img/sprites/sprite.png';
$radio-empty: (65px, 81px, -65px, -81px, 24px, 24px, 185px, 126px, '../img/sprites/sprite.png', 'radio_empty', );
$radio-full-name: 'radio_full';
$radio-full-x: 109px;
$radio-full-y: 81px;
$radio-full-offset-x: -109px;
$radio-full-offset-y: -81px;
$radio-full-width: 24px;
$radio-full-height: 24px;
$radio-full-total-width: 185px;
$radio-full-total-height: 126px;
$radio-full-image: '../img/sprites/sprite.png';
$radio-full: (109px, 81px, -109px, -81px, 24px, 24px, 185px, 126px, '../img/sprites/sprite.png', 'radio_full', );
$spritesheet-width: 185px;
$spritesheet-height: 126px;
$spritesheet-image: '../img/sprites/sprite.png';
$spritesheet-sprites: ($checked, $link, $login, $notchecked, $pass, $quote, $radio-empty, $radio-full, );
$spritesheet: (185px, 126px, '../img/sprites/sprite.png', $spritesheet-sprites, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
