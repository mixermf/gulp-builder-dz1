/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$checked-name: 'checked';
$checked-x: 88px;
$checked-y: 65px;
$checked-offset-x: -88px;
$checked-offset-y: -65px;
$checked-width: 20px;
$checked-height: 20px;
$checked-total-width: 150px;
$checked-total-height: 89px;
$checked-image: '../img/sprites/sprite.png';
$checked: (88px, 65px, -88px, -65px, 20px, 20px, 150px, 89px, '../img/sprites/sprite.png', 'checked', );
$login-name: 'login';
$login-x: 0px;
$login-y: 0px;
$login-offset-x: 0px;
$login-offset-y: 0px;
$login-width: 45px;
$login-height: 45px;
$login-total-width: 150px;
$login-total-height: 89px;
$login-image: '../img/sprites/sprite.png';
$login: (0px, 0px, 0px, 0px, 45px, 45px, 150px, 89px, '../img/sprites/sprite.png', 'login', );
$notchecked-name: 'notchecked';
$notchecked-x: 130px;
$notchecked-y: 0px;
$notchecked-offset-x: -130px;
$notchecked-offset-y: 0px;
$notchecked-width: 20px;
$notchecked-height: 20px;
$notchecked-total-width: 150px;
$notchecked-total-height: 89px;
$notchecked-image: '../img/sprites/sprite.png';
$notchecked: (130px, 0px, -130px, 0px, 20px, 20px, 150px, 89px, '../img/sprites/sprite.png', 'notchecked', );
$pass-name: 'pass';
$pass-x: 65px;
$pass-y: 0px;
$pass-offset-x: -65px;
$pass-offset-y: 0px;
$pass-width: 45px;
$pass-height: 45px;
$pass-total-width: 150px;
$pass-total-height: 89px;
$pass-image: '../img/sprites/sprite.png';
$pass: (65px, 0px, -65px, 0px, 45px, 45px, 150px, 89px, '../img/sprites/sprite.png', 'pass', );
$radio-empty-name: 'radio_empty';
$radio-empty-x: 0px;
$radio-empty-y: 65px;
$radio-empty-offset-x: 0px;
$radio-empty-offset-y: -65px;
$radio-empty-width: 24px;
$radio-empty-height: 24px;
$radio-empty-total-width: 150px;
$radio-empty-total-height: 89px;
$radio-empty-image: '../img/sprites/sprite.png';
$radio-empty: (0px, 65px, 0px, -65px, 24px, 24px, 150px, 89px, '../img/sprites/sprite.png', 'radio_empty', );
$radio-full-name: 'radio_full';
$radio-full-x: 44px;
$radio-full-y: 65px;
$radio-full-offset-x: -44px;
$radio-full-offset-y: -65px;
$radio-full-width: 24px;
$radio-full-height: 24px;
$radio-full-total-width: 150px;
$radio-full-total-height: 89px;
$radio-full-image: '../img/sprites/sprite.png';
$radio-full: (44px, 65px, -44px, -65px, 24px, 24px, 150px, 89px, '../img/sprites/sprite.png', 'radio_full', );
$spritesheet-width: 150px;
$spritesheet-height: 89px;
$spritesheet-image: '../img/sprites/sprite.png';
$spritesheet-sprites: ($checked, $login, $notchecked, $pass, $radio-empty, $radio-full, );
$spritesheet: (150px, 89px, '../img/sprites/sprite.png', $spritesheet-sprites, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
